apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: fastapi_demo
  title: Python HTTP client
  description: Generates an HTTP Python client library from an OpenAPI specification
  tags:
    - python
spec:
  owner: dts_platform_operations
  type: service
  parameters:
    - title: Provide some simple information
      required:
        - product
        - owner
      properties:
        product:
          title: Product
          type: string
          description: Product this component belongs to, normally the team name, e.g. cmc
        description:
          title: Description
          type: string
          description: Description of the client, a sensible default will be used if not
            specified.
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
  steps:
    - id: template
      name: Fetch Skeleton + Template
      action: fetch:template
      input:
        url: ./skeleton
        values:
          product: ${{ parameters.product }}
          component: ${{ parameters.component }}
          app_full_name: ${{ parameters.product }}-${{ parameters.component }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          destination: ${{ parameters.repoUrl | parseRepoUrl }}
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts:
          - github.com
        repoUrl: ${{ parameters.repoUrl }}
        access: ${{ parameters.github_admin_team }}
        requireCodeOwnerReviews: true
        repoVisibility: public
        topics:
          - ${{ parameters.product }}
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: /catalog-info.yaml
  output:
    remoteUrl: ${{ steps.publish.output.remoteUrl }}
    entityRef: ${{ steps.register.output.entityRef }}